/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ia.proyectofinal_ia.ui;

import ia.proyectofinal_ia.classes.DataManager;
import ia.proyectofinal_ia.classes.Movie;
import ia.proyectofinal_ia.classes.MovieProb;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author eecon
 */
public class principal extends javax.swing.JFrame {

    DataManager manager;
    DefaultTableModel movie_model = new DefaultTableModel() {
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel favorite_movies = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel recommended_movies = new DefaultTableModel() {
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    Movie movie_aux;
    ArrayList<MovieProb> recommend = new ArrayList<>();
    ArrayList<Movie> aux_list = new ArrayList<>();

    /**
     * Creates new form principal
     */
    public principal() throws IOException {
        initComponents();

        jMovieTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        manager = new DataManager();
        setTablesModels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jMovieTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jFavoriteTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jRecommendedTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 255, 102));
        setForeground(java.awt.Color.white);
        setPreferredSize(new java.awt.Dimension(1100, 1100));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(890, 265));

        jMovieTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jMovieTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMovieTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jMovieTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 1510, 210));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(890, 265));

        jFavoriteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jFavoriteTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFavoriteTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jFavoriteTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 790, 1510, 140));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(890, 265));

        jRecommendedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jRecommendedTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRecommendedTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jRecommendedTable);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 500, 1510, 200));

        jLabel1.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\eecon\\Desktop\\Movies.PNG")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 140, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\eecon\\Desktop\\Fav.PNG")); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 710, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\eecon\\Desktop\\Recommended.PNG")); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 420, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\eecon\\Downloads\\Fondo_Erick_1.png")); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1600, 940));

        setBounds(0, 0, 1623, 989);
    }// </editor-fold>//GEN-END:initComponents

    private void jMovieTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMovieTableMouseClicked
        // TODO add your handling code here:
        int index = jMovieTable.getSelectedRow();
        TableModel model = jMovieTable.getModel();
        String title = (String) model.getValueAt(index, 5);
        boolean newFav = false;

        for (Movie movie : manager.getMovies_list()) {
            if (movie.getTitle().equals(title)) {
                if (!manager.getFavorites().contains(movie)) {
                    manager.getFavorites().add(movie);
                    newFav = true;
                    movie_aux = movie;
                    break;
                }
            }
        }

        if (newFav) {
            //Update list of Fav Movies
            addToFavorites();
            //Update recommended movies
            startFiltering();
        }

    }//GEN-LAST:event_jMovieTableMouseClicked

    private void jFavoriteTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFavoriteTableMouseClicked
        // TODO add your handling code here:
        int index = jFavoriteTable.getSelectedRow();
        TableModel model = jFavoriteTable.getModel();
        String title = (String) model.getValueAt(index, 5);

        for (Movie movie : manager.getFavorites()) {
            if (movie.getTitle().equals(title)) {
                manager.getFavorites().remove(movie);
                break;
            }
        }

        favorite_movies.removeRow(index);
        jFavoriteTable.setModel(favorite_movies);
        startFiltering();

    }//GEN-LAST:event_jFavoriteTableMouseClicked

    private void jRecommendedTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRecommendedTableMouseClicked
        // TODO add your handling code here:
        int index = jRecommendedTable.getSelectedRow();
        TableModel model = jRecommendedTable.getModel();
        String title = (String) model.getValueAt(index, 5);
        boolean newFav = false;

        for (Movie movie : manager.getMovies_list()) {
            if (movie.getTitle().equals(title)) {
                if (!manager.getFavorites().contains(movie)) {
                    manager.getFavorites().add(movie);
                    newFav = true;
                    movie_aux = movie;
                    break;
                }
            }
        }

        if (newFav) {
            //Update list of Fav Movies
            addToFavorites();
            //Update recommended movies
            startFiltering();
        }
    }//GEN-LAST:event_jRecommendedTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new principal().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void setTablesModels() {
        /*
        Model used for the table that shows all the
        movies from de IMBD list
         */

        movie_model.addColumn("Color");
        movie_model.addColumn("Director");
        movie_model.addColumn("Time");
        movie_model.addColumn("Genres");
        movie_model.addColumn("Actors");
        movie_model.addColumn("Movie Title");
        movie_model.addColumn("Lenguage");
        movie_model.addColumn("Country");
        movie_model.addColumn("Year");
        movie_model.addColumn("Rating");
        movie_model.addColumn("Score");

        for (Movie movie : manager.getMovies_list()) {
            movie_model.addRow(new Object[]{movie.getColor(), movie.getDirector(), movie.getDuration(), movie.getGenres(), movie.getActor1() + ", " + movie.getActor2()
                + ", " + movie.getActor3(), movie.getTitle(), movie.getLenguage(), movie.getCountry(), movie.getYear(), movie.getRating(), movie.getScore()});
        }

        jMovieTable.setModel(movie_model);

        jMovieTable.getColumn("Color").setPreferredWidth(15);
        jMovieTable.getColumn("Director").setPreferredWidth(85);
        jMovieTable.getColumn("Time").setPreferredWidth(10);
        jMovieTable.getColumn("Genres").setPreferredWidth(200);
        jMovieTable.getColumn("Actors").setPreferredWidth(275);
        jMovieTable.getColumn("Movie Title").setPreferredWidth(315);
        jMovieTable.getColumn("Lenguage").setPreferredWidth(20);
        jMovieTable.getColumn("Country").setPreferredWidth(30);
        jMovieTable.getColumn("Year").setPreferredWidth(15);
        jMovieTable.getColumn("Rating").setPreferredWidth(20);
        jMovieTable.getColumn("Score").setPreferredWidth(15);

        /*
        Model used for the table where the user can see the
        recommended movies
         */
        recommended_movies.addColumn("Color");
        recommended_movies.addColumn("Director");
        recommended_movies.addColumn("Time");
        recommended_movies.addColumn("Genres");
        recommended_movies.addColumn("Actors");
        recommended_movies.addColumn("Movie Title");
        recommended_movies.addColumn("Lenguage");
        recommended_movies.addColumn("Country");
        recommended_movies.addColumn("Year");
        recommended_movies.addColumn("Rating");
        recommended_movies.addColumn("Score");

        Collections.sort(manager.getMovies_list(), (o1, o2) -> o2.getScore().compareTo(o1.getScore()));
        int cont = 10;
        for (Movie movie : manager.getMovies_list()) {
            recommended_movies.addRow(new Object[]{movie.getColor(), movie.getDirector(), movie.getDuration(), movie.getGenres(), movie.getActor1() + ", " + movie.getActor2()
                + ", " + movie.getActor3(), movie.getTitle(), movie.getLenguage(), movie.getCountry(), movie.getYear(), movie.getRating(), movie.getScore()});

            cont--;
            if (cont == 0) {
                break;
            }
        }

        jRecommendedTable.setModel(recommended_movies);

        jRecommendedTable.getColumn("Color").setPreferredWidth(15);
        jRecommendedTable.getColumn("Director").setPreferredWidth(85);
        jRecommendedTable.getColumn("Time").setPreferredWidth(10);
        jRecommendedTable.getColumn("Genres").setPreferredWidth(200);
        jRecommendedTable.getColumn("Actors").setPreferredWidth(275);
        jRecommendedTable.getColumn("Movie Title").setPreferredWidth(315);
        jRecommendedTable.getColumn("Lenguage").setPreferredWidth(20);
        jRecommendedTable.getColumn("Country").setPreferredWidth(30);
        jRecommendedTable.getColumn("Year").setPreferredWidth(15);
        jRecommendedTable.getColumn("Rating").setPreferredWidth(20);
        jRecommendedTable.getColumn("Score").setPreferredWidth(15);

        /*
        Model used for the table where the user can see the
        favorite movies
         */
        favorite_movies.addColumn("Color");
        favorite_movies.addColumn("Director");
        favorite_movies.addColumn("Time");
        favorite_movies.addColumn("Genres");
        favorite_movies.addColumn("Actors");
        favorite_movies.addColumn("Movie Title");
        favorite_movies.addColumn("Lenguage");
        favorite_movies.addColumn("Country");
        favorite_movies.addColumn("Year");
        favorite_movies.addColumn("Rating");
        favorite_movies.addColumn("Score");

        jFavoriteTable.setModel(favorite_movies);

        jFavoriteTable.getColumn("Color").setPreferredWidth(15);
        jFavoriteTable.getColumn("Director").setPreferredWidth(85);
        jFavoriteTable.getColumn("Time").setPreferredWidth(10);
        jFavoriteTable.getColumn("Genres").setPreferredWidth(200);
        jFavoriteTable.getColumn("Actors").setPreferredWidth(275);
        jFavoriteTable.getColumn("Movie Title").setPreferredWidth(315);
        jFavoriteTable.getColumn("Lenguage").setPreferredWidth(20);
        jFavoriteTable.getColumn("Country").setPreferredWidth(30);
        jFavoriteTable.getColumn("Year").setPreferredWidth(15);
        jFavoriteTable.getColumn("Rating").setPreferredWidth(20);
        jFavoriteTable.getColumn("Score").setPreferredWidth(15);
    }

    private void addToFavorites() {
        favorite_movies.addRow(new Object[]{movie_aux.getColor(), movie_aux.getDirector(), movie_aux.getDuration(), movie_aux.getGenres(), movie_aux.getActor1()
            + ", " + movie_aux.getActor2() + ", " + movie_aux.getActor3(), movie_aux.getTitle(), movie_aux.getLenguage(), movie_aux.getCountry(),
            movie_aux.getYear(), movie_aux.getRating(), movie_aux.getScore()});

        jFavoriteTable.setModel(favorite_movies);
    }

    private void startFiltering() {
        boolean ready, words;
        String[] data, data2;
        aux_list.clear();

        for (Movie movie : manager.getMovies_list()) {

            for (Movie movie2 : manager.getFavorites()) {
                ready = false;
                /*
                    Rating && Lenguage
                 */
                if (movie.getRating().equals(movie2.getRating()) || movie.getLenguage().equals(movie2.getLenguage())
                      ||  movie.getDirector().equals(movie2.getDirector())) {
                    ready = true;
                }

                if (ready) {
                    if (!aux_list.contains(movie)) {
                        aux_list.add(movie);
                    }
                }
            }
        }

        manager.getFilter().clear();
        for (Movie movie : aux_list) {
            for (Movie movie2 : manager.getFavorites()) {
                ready = false;
                words = false;
                /*
                    In the case of the keywords and the genres, there´s the need of splitting the
                    words to get all of them
                 */
                data = movie.getGenres().split("\\|");
                data2 = movie2.getGenres().split("\\|");

                for (String word : data) {
                    for (String word2 : data2) {
                        if (word.equals(word2)) {
                            ready = true;
                        }
                    }
                }
                if (ready) {
                    data = movie.getKeywords().split("\\|");
                    data2 = movie2.getKeywords().split("\\|");

                    for (String word : data) {
                        for (String word2 : data2) {
                            if (word.equals(word2)) {
                                words = true;
                            }
                        }
                    }

                    if (words) {
                        manager.getFilter().add(movie);

                    }
                }
            }
        }

        /*
            Now after applying a method to get a sampling.
            Using the new list, we get the films with the higher
            probability and show it to the user.
         */
        for (Movie movie : manager.getFavorites()) {
            removeAllRepetead(movie.getTitle());
        }

        recommend.clear();
        for (Movie movie : manager.getFilter()) {
            Double num = ((Math.pow(Math.E, movie.getProbabilityP())) * manager.getFavorites().size() / manager.getMovies_list().size());
            Double dem = ((Math.pow(Math.E, movie.getProbabilityP())) * manager.getFavorites().size() / manager.getMovies_list().size())
                    + ((Math.pow(Math.E, movie.getProbabilityP())) * (manager.getMovies_list().size() - manager.getFavorites().size()) / manager.getMovies_list().size());
            Double prob = num / dem;

            MovieProb help = new MovieProb(movie.getTitle(), prob);
            if (!recommend.contains(help)) {
                recommend.add(help);
            }
        }
        
        
        
        int rows = recommended_movies.getRowCount();
        for (int i = rows - 1; i > -1; i--) {
            recommended_movies.removeRow(i);
        }

        Collections.sort(recommend, (o1, o2) -> o2.getProbability().compareTo(o1.getProbability()));

        int cont;
        if (recommend.size() >= 20) {
            cont = 20;
        } else {
            cont = recommend.size();
        }

        for (MovieProb movie2 : recommend) {
            for (Movie movie : manager.getFilter()) {
                if (movie.getTitle().equals(movie2.getTitle())) {
                    recommended_movies.addRow(new Object[]{movie.getColor(), movie.getDirector(), movie.getDuration(), movie.getGenres(), movie.getActor1() + ", " + movie.getActor2()
                        + ", " + movie.getActor3(), movie.getTitle(), movie.getLenguage(), movie.getCountry(), movie.getYear(), movie.getRating(), movie.getScore()});
                    break;
                }
            }

            cont--;
            if (cont == 0) {
                break;
            }
        }

        jRecommendedTable.setModel(recommended_movies);

    }

    private boolean removeAllRepetead(String title) {
        for (Movie movie : manager.getFilter()) {
            if (movie.getTitle().equals(title)) {
                int index = manager.getFilter().indexOf(movie);
                manager.getFilter().remove(index);
                removeAllRepetead(title);
                return true;
            }
        }
        return true;
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable jFavoriteTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTable jMovieTable;
    private javax.swing.JTable jRecommendedTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
